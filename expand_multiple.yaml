blueprint:
  name: B&O Mozart Expand with Slave Peer Selection
  description: >
    Når master-enheden skifter til den angivne tilstand, udvides den med de slave-enheder,
    du har valgt. Blueprintet udtrækker automatisk JID’erne fra masterens 'peers'-attribut
    ved at matche hver slave-enheds 'friendly_name' med en nøgle i 'peers'.
  domain: automation
  input:
    master_device:
      name: Master Device
      description: "Vælg den B&O Mozart-enhed, der skal expanderes."
      selector:
        entity:
          domain: media_player
          integration: bang_olufsen
    slave_devices:
      name: Slave Devices
      description: >
        Vælg de slave-enheder, der skal inkluderes i masterens gruppe.
        Blueprintet udtrækker JID’erne fra masterens 'peers'-attribut,
        baseret på hver slave-enheds 'friendly_name'.
      selector:
        entity:
          domain: media_player
          integration: bang_olufsen
          multiple: true
    trigger_state:
      name: Trigger State
      description: >
        Den tilstand, som master-enheden skal skifte til for at udløse expansionen.
      default: "playing"
      selector:
        text:
trigger:
  - platform: state
    entity_id: !input master_device
    to: !input trigger_state
action:
  # Overfør blueprint-input til lokale variabler, så de kan bruges i templaten.
  - variables:
      master: !input master_device
      slaves: !input slave_devices
  # (Valgfrit) Log masterens peers for debugging.
  - service: system_log.write
    data:
      message: "Master peers: {{ state_attr(master, 'peers') }}"
      level: info
  # (Valgfrit) Log de valgte slave-enheders friendly names for debugging.
  - service: system_log.write
    data:
      message: >
        {%- for slave in slaves -%}
          Slave: {{ state_attr(slave, 'friendly_name') }}
        {%- endfor -%}
      level: info
  # Kald expand-servicen med JID’erne udtrukket fra masterens peers, baseret på slave-enhedernes friendly_name.
  - service: bang_olufsen.beolink_expand
    target:
      entity_id: !input master_device
    data_template:
      beolink_jids: >
        {%- set master_peers = state_attr(master, 'peers') -%}
        {%- set jids = [] -%}
        {%- if master_peers -%}
          {%- for slave in slaves -%}
            {%- set friendly = state_attr(slave, 'friendly_name') -%}
            {%- if friendly and friendly in master_peers -%}
              {%- set _ = jids.append(master_peers[friendly]) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        {{ jids }}
